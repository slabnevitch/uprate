// @mixin font($fname, $fstyle, $furl)
//   @font-face
//     font-family: $fname
//     font-style: $fstyle
//     font-display: swap
//   	unicode-range: U+000-5FF
//     src: url($furl) format('woff2')

// @include font("SF-Pro-Display-Light", normal, "~@/assets/fonts/SF-Pro-Display-Light.woff2");
// @include font("SF-Pro-Display-Medium", normal, "~@/assets/fonts/SF-Pro-Display-Medium.woff2");
// @include font("SF-Pro-Display-Regular", normal, "~@/assets/fonts/SF-Pro-Display-Regular.woff2");
// @include font("SF-Pro-Display-Semibold", normal, "~@/assets/fonts/SF-Pro-Display-Semibold.woff2");
// @include font("SF-Pro-Text-Light", normal, "~@/assets/fonts/SF-Pro-Text-Light.woff2");
// @include font("SF-Pro-Text-Regular", normal, "~@/assets/fonts/SF-Pro-Text-Regular.woff2");
// @include font("SF-Pro-Text-Semibold", normal, "~@/assets/fonts/SF-Pro-Text-Semibold.woff2");

@mixin font-face(
  $font-family,
  $file-path,
  $weight: normal,
  $style: normal,
  $asset-pipeline:true,
  $file-formats: woff2 woff ttf svg) {

  $font-url-prefix: font-url-prefixer($asset-pipeline);

  @font-face {
    font-family: $font-family;
    font-style: $style;
    font-weight: $weight;
    font-display: swap;
    unicode-range: U+000-5FF;

    src: font-source-declaration(
      $font-family,
      $file-path,
      $asset-pipeline,
      $file-formats,
      $font-url-prefix
    );
  }
}

@function font-url-prefixer($asset-pipeline) {
  @if $asset-pipeline == true {
    @return font-url;
  } @else {
    @return url;
  }
}

@function font-source-declaration(
  $font-family,
  $file-path,
  $asset-pipeline,
  $file-formats,
  $font-url) {

  $src: null;

  $formats-map: (
    eot:   "#{$file-path}.eot?#iefix" format("embedded-opentype"),
    woff2: "#{$file-path}.woff2" format("woff2"),
    woff:  "#{$file-path}.woff" format("woff"),
    ttf:   "#{$file-path}.ttf" format("truetype"),
    svg:   "#{$file-path}.svg##{$font-family}" format("svg")
  );

  @each $key, $values in $formats-map {
    @if contains($file-formats, $key) {
      $file-path: nth($values, 1);
      $font-format: nth($values, 2);

      @if $asset-pipeline == true {
        $src: append($src, font-url($file-path) $font-format, comma);
      } @else {
        $src: append($src, url($file-path) $font-format, comma);
      }
    }
  }

  @return $src;
}
@include font-face("SF-Pro-Display-Light", "~@/assets/fonts/SF-Pro-Display-Light", $file-formats: woff woff2);
@include font-face("SF-Pro-Display-Medium", "~@/assets/fonts/SF-Pro-Display-Medium", $file-formats: woff woff2);
@include font-face("SF-Pro-Display-Regular", "~@/assets/fonts/SF-Pro-Display-Regular", $file-formats: woff woff2);
@include font-face("SF-Pro-Display-Semibold", "~@/assets/fonts/SF-Pro-Display-Semibold", $file-formats: woff woff2);
@include font-face("SF-Pro-Text-Light", "~@/assets/fonts/SF-Pro-Text-Light", $file-formats: woff woff2);
@include font-face("SF-Pro-Text-Regular", "~@/assets/fonts/SF-Pro-Text-Regular", $file-formats: woff woff2);
@include font-face("SF-Pro-Text-Semibold", "~@/assets/fonts/SF-Pro-Text-Semibold", $file-formats: woff woff2);

// Метод подключения с Хабра
	// @font-face {
	//   font-family: 'Geometria';
	//   src: local('Geometria Thin'), local('Geometria-Thin'),
	//     url('~@/assets/fonts/geometria/Geometria-Thin.woff') format('woff'),
	//     url('~@/assets/fonts/geometria/Geometria-Thin.woff2') format('woff2');
	//   font-weight: 100;
	//   font-style: normal;
	// }

// Метод подключения отсюда https://blog.logrocket.com/best-practices-for-loading-fonts-in-vue/
	// @font-face {
	//   font-family: "Roboto";
	//   font-weight: 400;
	//   font-style: normal;
	//   font-display: auto;
	//   unicode-range: U+000-5FF;
	//   src: local("Roboto"), url("/fonts/Roboto/Roboto-Regular.woff2") format("woff2"), url("/fonts/Roboto/Roboto-Regular.woff") format("woff");
	// }