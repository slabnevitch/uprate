@mixin dib ($valine: top){
	display: inline-block;
	vertical-align: $valine;
}

@mixin clearfix{
	&:before,
	&:after{
		content: '';
		display: table;
	}

	&:after{
		clear: both;
	}
}

@mixin dots-family{
	white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin brs($radius: 5px){
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;

	-webkit-background-clip: padding-box;
	-moz-background-clip: padding-box;
	background-clip: padding-box;
} 

@mixin box-shadow($string...){
	-webkit-box-shadow: $string;
	-moz-box-shadow: $string;
	box-shadow: $string;
} 

@mixin transition($transitions...){
	-webkit-transition: $transition;
	-moz-transition: $transition;
	-ms-transition: $transition;
	-o-transition: $transition;
	transition: $transition;
} 

@mixin placecolor($color: #000000){
	&::-webkit-input-placeholder{
		color: $color;
		opacity: 1;
	}
	&::-moz-placeholder{
			color: $color;
			opacity: 1;
	}
	&:-moz-placeholder{
			color: $color;
			opacity: 1;
	}
	&:-ms-input-placeholder{
			color: $color;
			opacity: 1;
	}
} 

@mixin transform($transforms...){
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin absolute-center-old{
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	margin: auto;
	position: absolute;
}
@mixin absolute-center{
	display: block;
  max-width: 100%;
  max-height: 100%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%);
}

@mixin checkbox{
	position: absolute;
  box-sizing: border-box;
  width: 1px;
  height: 1px;
  display: block;
  left: 50%;
  top: 100%;
  margin: 0;
  padding: 0;
  opacity: 0;
}

@mixin vertical-grad($top, $bottom){
	background: $top; /* Old browsers */
    background: -moz-linear-gradient(top,  $top 0%, $bottom 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  $top 0%,$bottom 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top,  $top 0%,$bottom 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  $top 0%,$bottom 100%); /* IE10+ */
    background: linear-gradient(to bottom,  $top 0%,$bottom 100%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000',GradientType=0 ); /* IE6-9 */
}

@mixin text-gradient($dir, $from, $to) {
  background: -webkit-linear-gradient($dir, $from, $to);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
// Using: @include text-gradient(top, #5327ff, #11aeff);

@mixin bb{
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

$baseFontSize : 13;
@function rem($pixels, $context: $baseFontSize) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1rem;
}

// Adaptive font-size
// $maxWidth: 1280; // ширина макета в граф. редакторе
@mixin adaptive-font($pcSize, $mobSize) {
 $addSize: $pcSize - $mobSize;
 $maxWidth: $maxWidth - 320;
 font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth}));
}
// end Adaptive font-size

@mixin adaptive-value($property, $pcSize, $mobSize, $type) { //$type = 1 -- 
 // $minScreenSize = $minScreenSize || 320px;
 $addSize: $pcSize - $mobSize;
 @if $type == 1{//использовать если ширина экрана меньше $maxWidthContainer
 		#{$property}: $pcSize + px;
 		@media (max-width: #{$maxWidthContainer + px}){
 			#{$property}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
 		}
 }@else if $type == 2{//использовать если ширина экрана больше $maxWidthContainer
 		#{$property}: $pcSize + px;
 		@media (min-width: #{$maxWidthContainer + px}){
			#{$property}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
 		}
 }@else{//на всей ширине экрана

 		#{$property}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer}));
 }
}

@mixin adaptive-padding($pcSize, $mobSize, $side) {
 $addSize: $pcSize - $mobSize;
 $maxWidth: $maxWidth - 320;
 padding-#{$side}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth}));
}
